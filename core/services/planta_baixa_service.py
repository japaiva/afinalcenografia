# core/services/planta_baixa_service.py - VERS√ÉO COMPLETA COM AGENTE ARQUITETO

import json
import requests
from typing import Dict, List, Optional
from django.core.files.base import ContentFile
from django.utils import timezone
from django.conf import settings

from projetista.models import PlantaBaixa
from projetos.models import Briefing
from core.models import Agente
import logging

logger = logging.getLogger(__name__)

class PlantaBaixaService:
    """
    Servi√ßo para gera√ß√£o de plantas baixas usando agente Arquiteto de Estandes
    """
    
    def __init__(self):
        self.algoritmo_versao = "agente_arquiteto_v3"
        self.agente = self._get_agente_arquiteto()

    def _get_agente_arquiteto(self):
        """Obt√©m o agente Arquiteto de Estandes"""
        try:
            agente = Agente.objects.get(nome="Arquiteto de Estandes", ativo=True)
            return agente
        except Agente.DoesNotExist:
            logger.error("Agente 'Arquiteto de Estandes' n√£o encontrado")
            raise Exception("Agente Arquiteto de Estandes n√£o est√° configurado")

    def gerar_planta_baixa(self, briefing: Briefing, versao: int = 1, 
                          planta_anterior: PlantaBaixa = None) -> Dict:
        """
        M√âTODO PRINCIPAL: Gera planta baixa usando agente IA
        """
        try:
            logger.info(f"üöÄ Iniciando gera√ß√£o com agente para projeto {briefing.projeto.nome}")
            
            # üìã ETAPA 1: Validar dados m√≠nimos
            if not self._briefing_tem_dados_minimos(briefing):
                return {
                    'success': False,
                    'error': 'Briefing incompleto - preencha pelo menos a √°rea ou dimens√µes do estande',
                    'critica': '‚ùå DADOS INSUFICIENTES: Complete as informa√ß√µes do estande no briefing',
                    'pode_prosseguir': False,
                    'sugestoes': [
                        'Preencha a √°rea total do estande OU',
                        'Preencha as medidas (frente √ó fundo) do estande',
                        'Informe o tipo de estande (ilha, esquina, corredor, etc.)'
                    ]
                }
            
            # üìã ETAPA 2: Construir prompt estruturado para o agente
            prompt_briefing = self._construir_prompt_briefing(briefing)
            
            # ü§ñ ETAPA 3: Chamar agente para gerar planta
            resultado_agente = self._chamar_agente_arquiteto(prompt_briefing)
            
            if not resultado_agente['success']:
                return {
                    'success': False,
                    'error': resultado_agente['error'],
                    'critica': f"‚ùå ERRO DO AGENTE: {resultado_agente['error']}",
                    'pode_prosseguir': False,
                    'detalhes': resultado_agente.get('details', '')
                }
            
            # üìê ETAPA 4: Processar resposta do agente
            layout_data = resultado_agente['layout_data']
            svg_content = layout_data.get('svg_completo', '')
            
            if not svg_content:
                return {
                    'success': False,
                    'error': 'Agente n√£o gerou SVG v√°lido',
                    'critica': '‚ùå SVG INV√ÅLIDO: O agente n√£o conseguiu gerar a visualiza√ß√£o',
                    'pode_prosseguir': False
                }
            
            # üíæ ETAPA 5: Criar objeto PlantaBaixa
            try:
                planta = self._criar_objeto_planta_agente(
                    briefing, versao, layout_data, svg_content, planta_anterior
                )
            except Exception as e:
                logger.error(f"Erro ao salvar planta: {str(e)}")
                return {
                    'success': False,
                    'error': f'Erro ao salvar planta no banco: {str(e)}',
                    'critica': '‚ùå ERRO NO SALVAMENTO: Planta gerada mas n√£o foi poss√≠vel salvar',
                    'pode_prosseguir': False
                }
            
            logger.info(f"üéâ Planta baixa v{versao} gerada com sucesso pelo agente!")
            
            return {
                'success': True,
                'planta': planta,
                'layout': layout_data,
                'validacao_ok': True,
                'critica': layout_data.get('resumo_decisoes', 'Planta gerada com sucesso'),
                'detalhes_validacao': {
                    'areas_atendidas': layout_data.get('dados_basicos', {}).get('areas_atendidas', []),
                    'area_total_usada': layout_data.get('dados_basicos', {}).get('area_total_usada', 0),
                    'tipo_estande': layout_data.get('dados_basicos', {}).get('tipo_estande', ''),
                    'lados_abertos': layout_data.get('dados_basicos', {}).get('lados_abertos', [])
                },
                'pode_prosseguir': True,
                'message': f'Planta baixa v{versao} gerada com sucesso pelo agente Arquiteto!'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro geral na gera√ß√£o com agente: {str(e)}", exc_info=True)
            return {
                'success': False,
                'error': f'Erro t√©cnico na gera√ß√£o: {str(e)}',
                'critica': f'‚ùå ERRO T√âCNICO: {str(e)}',
                'pode_prosseguir': False
            }

    def _briefing_tem_dados_minimos(self, briefing: Briefing) -> bool:
        """Verifica se o briefing tem dados m√≠nimos para gerar planta"""
        # Verificar se tem √°rea OU dimens√µes
        tem_area = briefing.area_estande and briefing.area_estande > 0
        tem_dimensoes = (briefing.medida_frente and briefing.medida_frente > 0 and 
                        briefing.medida_fundo and briefing.medida_fundo > 0)
        
        if not (tem_area or tem_dimensoes):
            logger.warning("Briefing sem √°rea nem dimens√µes definidas")
            return False
        
        return True

    def _construir_prompt_briefing(self, briefing: Briefing) -> str:
        """Constr√≥i prompt estruturado para o agente baseado no briefing"""
        
        # Dados b√°sicos do estande
        area_total = briefing.area_estande or 0
        medida_frente = briefing.medida_frente or 0
        medida_fundo = briefing.medida_fundo or 0
        tipo_estande = getattr(briefing, 'tipo_stand', 'ilha') or 'ilha'  # Corrigido: tipo_stand em vez de tipo_estande
        
        # Se n√£o tem √°rea mas tem dimens√µes, calcular
        if not area_total and medida_frente and medida_fundo:
            area_total = float(medida_frente) * float(medida_fundo)
        
        # Se n√£o tem dimens√µes mas tem √°rea, estimar formato retangular
        elif area_total and not (medida_frente and medida_fundo):
            import math
            ratio = 1.6  # Propor√ß√£o t√≠pica de estandes
            medida_fundo = math.sqrt(float(area_total) / ratio)
            medida_frente = float(area_total) / medida_fundo

        # Construir se√ß√µes do briefing
        prompt_sections = []
        
        # 1. DADOS B√ÅSICOS
        prompt_sections.append(f"""
=== DADOS B√ÅSICOS DO ESTANDE ===
Tipo de estande: {tipo_estande}
Dimens√µes: {medida_frente:.1f}m (frente) x {medida_fundo:.1f}m (fundo)
√Årea total: {area_total:.1f}m¬≤
Empresa: {briefing.projeto.empresa.nome}
Projeto: {briefing.projeto.nome}
""")

        # 2. √ÅREAS DE EXPOSI√á√ÉO
        areas_exposicao = []
        try:
            if hasattr(briefing, 'areas_exposicao'):
                for idx, area in enumerate(briefing.areas_exposicao.all(), 1):
                    metragem = getattr(area, 'metragem', 0) or 0
                    
                    # Caracter√≠sticas especiais
                    caracteristicas = []
                    if getattr(area, 'tem_lounge', False):
                        caracteristicas.append('lounge')
                    if getattr(area, 'tem_balcao_recepcao', False):
                        caracteristicas.append('balc√£o de recep√ß√£o')
                    if getattr(area, 'tem_balcao_cafe', False):
                        caracteristicas.append('balc√£o de caf√©')
                    if getattr(area, 'tem_caixa_vendas', False):
                        caracteristicas.append('caixa de vendas')
                    if getattr(area, 'tem_vitrine', False):
                        caracteristicas.append('vitrine')
                    
                    desc_area = f"√Årea de Exposi√ß√£o {idx}: {metragem:.1f}m¬≤"
                    if caracteristicas:
                        desc_area += f" (inclui: {', '.join(caracteristicas)})"
                    
                    areas_exposicao.append(desc_area)
        except Exception as e:
            logger.warning(f"Erro ao processar √°reas de exposi√ß√£o: {e}")
        
        if areas_exposicao:
            prompt_sections.append(f"""
=== √ÅREAS DE EXPOSI√á√ÉO SOLICITADAS ===
{chr(10).join(areas_exposicao)}
""")

        # 3. SALAS DE REUNI√ÉO
        salas_reuniao = []
        try:
            if hasattr(briefing, 'salas_reuniao'):
                for idx, sala in enumerate(briefing.salas_reuniao.all(), 1):
                    metragem = getattr(sala, 'metragem', 0) or 0
                    capacidade = getattr(sala, 'capacidade', 0) or 0
                    equipamentos = getattr(sala, 'equipamentos', '') or ''
                    
                    desc_sala = f"Sala de Reuni√£o {idx}: {metragem:.1f}m¬≤"
                    if capacidade:
                        desc_sala += f", capacidade {capacidade} pessoas"
                    if equipamentos:
                        desc_sala += f", equipamentos: {equipamentos}"
                    
                    salas_reuniao.append(desc_sala)
        except Exception as e:
            logger.warning(f"Erro ao processar salas de reuni√£o: {e}")
        
        if salas_reuniao:
            prompt_sections.append(f"""
=== SALAS DE REUNI√ÉO SOLICITADAS ===
{chr(10).join(salas_reuniao)}
""")

        # 4. COPAS
        copas = []
        try:
            if hasattr(briefing, 'copas'):
                for idx, copa in enumerate(briefing.copas.all(), 1):
                    metragem = getattr(copa, 'metragem', 0) or 0
                    equipamentos = getattr(copa, 'equipamentos', '') or ''
                    
                    desc_copa = f"Copa {idx}: {metragem:.1f}m¬≤"
                    if equipamentos:
                        desc_copa += f", equipamentos: {equipamentos}"
                    
                    copas.append(desc_copa)
        except Exception as e:
            logger.warning(f"Erro ao processar copas: {e}")
        
        if copas:
            prompt_sections.append(f"""
=== COPAS SOLICITADAS ===
{chr(10).join(copas)}
""")

        # 5. DEP√ìSITOS
        depositos = []
        try:
            if hasattr(briefing, 'depositos'):
                for idx, deposito in enumerate(briefing.depositos.all(), 1):
                    metragem = getattr(deposito, 'metragem', 0) or 0
                    finalidade = getattr(deposito, 'finalidade', '') or ''
                    
                    desc_deposito = f"Dep√≥sito {idx}: {metragem:.1f}m¬≤"
                    if finalidade:
                        desc_deposito += f", finalidade: {finalidade}"
                    
                    depositos.append(desc_deposito)
        except Exception as e:
            logger.warning(f"Erro ao processar dep√≥sitos: {e}")
        
        if depositos:
            prompt_sections.append(f"""
=== DEP√ìSITOS SOLICITADOS ===
{chr(10).join(depositos)}
""")

        # 6. OBSERVA√á√ïES GERAIS
        observacoes = []
        if briefing.objetivo_evento:
            observacoes.append(f"Objetivo do evento: {briefing.objetivo_evento}")
        if briefing.objetivo_estande:
            observacoes.append(f"Objetivo do estande: {briefing.objetivo_estande}")
        if briefing.estilo_estande:
            observacoes.append(f"Estilo desejado: {briefing.estilo_estande}")
        if briefing.tipo_ativacao:
            observacoes.append(f"Tipo de ativa√ß√£o: {briefing.tipo_ativacao}")
        if briefing.referencias_dados:
            observacoes.append(f"Refer√™ncias visuais: {briefing.referencias_dados}")
        
        if observacoes:
            prompt_sections.append(f"""
=== OBSERVA√á√ïES E REQUISITOS ESPECIAIS ===
{chr(10).join(observacoes)}
""")

        # 7. INSTRU√á√ÉO FINAL
        prompt_sections.append(f"""
=== SOLICITA√á√ÉO ===
Preciso que voc√™ crie uma planta baixa otimizada para este estande considerando:

1. O tipo de estande ({tipo_estande}) determina quais lados s√£o abertos
2. Todas as √°reas solicitadas devem ser inclu√≠das respeitando as metragens
3. N√∫cleo central deve conter ambientes fechados (reuni√£o, copa, dep√≥sito)
4. √Åreas de exposi√ß√£o devem ficar nos lados abertos do estande
5. Layout deve otimizar fluxo de visitantes e funcionalidade

Por favor, retorne sua resposta no formato JSON especificado nas suas instru√ß√µes de tarefa.
""")

        return '\n'.join(prompt_sections)

    def _chamar_agente_arquiteto(self, prompt_briefing: str) -> Dict:
        """Chama o agente Arquiteto de Estandes via API"""
        try:
            # Configurar headers
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {settings.OPENAI_API_KEY}'
            }
            
            # Construir mensagens para API
            messages = [
                {
                    "role": "system",
                    "content": self.agente.llm_system_prompt
                },
                {
                    "role": "user", 
                    "content": f"{self.agente.task_instructions}\n\n{prompt_briefing}"
                }
            ]
            
            # Dados da requisi√ß√£o
            data = {
                "model": self.agente.llm_model,
                "messages": messages,
                "temperature": float(self.agente.llm_temperature),
                "max_tokens": 4000,
                "response_format": {"type": "json_object"}
            }
            
            logger.info(f"Chamando agente {self.agente.nome} com modelo {self.agente.llm_model}")
            
            # Fazer requisi√ß√£o
            response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers=headers,
                json=data,
                timeout=60
            )
            
            if response.status_code != 200:
                error_msg = f"Erro na API: {response.status_code}"
                try:
                    error_detail = response.json().get('error', {}).get('message', '')
                    if error_detail:
                        error_msg += f" - {error_detail}"
                except:
                    pass
                
                return {
                    'success': False,
                    'error': error_msg,
                    'details': response.text
                }
            
            # Processar resposta
            result = response.json()
            
            if 'choices' not in result or not result['choices']:
                return {
                    'success': False,
                    'error': 'Resposta inv√°lida da API',
                    'details': str(result)
                }
            
            # Extrair conte√∫do JSON
            content = result['choices'][0]['message']['content']
            
            try:
                layout_data = json.loads(content)
            except json.JSONDecodeError as e:
                return {
                    'success': False,
                    'error': f'Resposta JSON inv√°lida do agente: {str(e)}',
                    'details': content[:500]
                }
            
            # Validar estrutura m√≠nima esperada
            if not self._validar_resposta_agente(layout_data):
                return {
                    'success': False,
                    'error': 'Resposta do agente n√£o tem estrutura esperada',
                    'details': str(layout_data)
                }
            
            return {
                'success': True,
                'layout_data': layout_data,
                'raw_response': result
            }
            
        except requests.exceptions.Timeout:
            return {
                'success': False,
                'error': 'Timeout na chamada do agente - tente novamente',
                'details': 'A requisi√ß√£o demorou mais que 60 segundos'
            }
        except requests.exceptions.ConnectionError:
            return {
                'success': False,
                'error': 'Erro de conex√£o com a API',
                'details': 'Verifique a conex√£o com a internet'
            }
        except Exception as e:
            logger.error(f"Erro ao chamar agente: {str(e)}", exc_info=True)
            return {
                'success': False,
                'error': f'Erro t√©cnico: {str(e)}',
                'details': str(e)
            }

    def _validar_resposta_agente(self, layout_data: Dict) -> bool:
        """Valida se a resposta do agente tem estrutura m√≠nima esperada"""
        try:
            # Verificar campos obrigat√≥rios
            required_fields = ['resumo_decisoes', 'dados_basicos', 'svg_completo']
            
            for field in required_fields:
                if field not in layout_data:
                    logger.error(f"Campo obrigat√≥rio '{field}' ausente na resposta do agente")
                    return False
            
            # Verificar se SVG n√£o est√° vazio
            svg_content = layout_data.get('svg_completo', '').strip()
            if not svg_content or len(svg_content) < 100:
                logger.error("SVG gerado pelo agente est√° vazio ou muito pequeno")
                return False
            
            # Verificar se √© SVG v√°lido (come√ßa com <?xml ou <svg)
            if not (svg_content.startswith('<?xml') or svg_content.startswith('<svg')):
                logger.error("Conte√∫do SVG n√£o parece ser v√°lido")
                return False
            
            # Verificar dados_basicos
            dados_basicos = layout_data.get('dados_basicos', {})
            if not isinstance(dados_basicos, dict):
                logger.error("dados_basicos deve ser um objeto")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o da resposta: {str(e)}")
            return False

    def _criar_objeto_planta_agente(self, briefing: Briefing, versao: int, 
                                  layout_data: Dict, svg_content: str,
                                  planta_anterior: PlantaBaixa = None) -> PlantaBaixa:
        """Cria e salva objeto PlantaBaixa baseado na resposta do agente"""
        try:
            # Extrair dados importantes
            dados_basicos = layout_data.get('dados_basicos', {})
            resumo_decisoes = layout_data.get('resumo_decisoes', '')
            
            # Preparar dados JSON estruturados
            dados_json = {
                'layout_agente': layout_data,
                'resumo_decisoes': resumo_decisoes,
                'tipo_estande': dados_basicos.get('tipo_estande', ''),
                'areas_atendidas': dados_basicos.get('areas_atendidas', []),
                'lados_abertos': dados_basicos.get('lados_abertos', []),
                'area_total_usada': dados_basicos.get('area_total_usada', 0),
                'nucleo_central': dados_basicos.get('nucleo_central', {}),
                'metadata': {
                    'algoritmo': self.algoritmo_versao,
                    'agente_usado': self.agente.nome,
                    'agente_id': self.agente.id,
                    'gerado_em': timezone.now().isoformat(),
                    'versao': versao
                }
            }
            
            # Par√¢metros de gera√ß√£o
            parametros_geracao = {
                'metodo': 'agente_ia',
                'agente_nome': self.agente.nome,
                'agente_modelo': self.agente.llm_model,
                'tipo_estande': dados_basicos.get('tipo_estande', ''),
                'areas_processadas': len(dados_basicos.get('areas_atendidas', [])),
                'resposta_validada': True
            }
            
            # Criar objeto PlantaBaixa
            planta = PlantaBaixa(
                projeto=briefing.projeto,
                briefing=briefing,
                projetista=briefing.projeto.projetista,
                versao=versao,
                planta_anterior=planta_anterior,
                algoritmo_usado=self.algoritmo_versao,
                parametros_geracao=parametros_geracao,
                dados_json=dados_json,
                status='pronta'
            )
            
            # Salvar arquivo SVG
            arquivo_svg = ContentFile(svg_content.encode('utf-8'))
            nome_arquivo = f"planta_agente_v{versao}_{briefing.projeto.numero}_{timezone.now().strftime('%Y%m%d_%H%M%S')}.svg"
            planta.arquivo_svg.save(nome_arquivo, arquivo_svg)
            
            planta.save()
            
            logger.info(f"Planta baixa v{versao} criada pelo agente salva: {nome_arquivo}")
            return planta
            
        except Exception as e:
            logger.error(f"Erro ao criar objeto planta do agente: {str(e)}", exc_info=True)
            raise Exception(f"Falha ao salvar planta baixa gerada pelo agente: {str(e)}")

    # ==========================================
    # M√âTODOS DE COMPATIBILIDADE E UTILIT√ÅRIOS
    # ==========================================

    def get_area_total(self, planta: PlantaBaixa) -> float:
        """Retorna √°rea total da planta baixa"""
        try:
            dados = planta.dados_json or {}
            return (dados.get('area_total_usada', 0) or 
                   dados.get('layout_agente', {}).get('dados_basicos', {}).get('area_total_usada', 0) or
                   dados.get('layout', {}).get('area_total_usada', 0))
        except:
            return 0

    def get_ambientes(self, planta: PlantaBaixa) -> List[Dict]:
        """Retorna lista de ambientes da planta"""
        try:
            dados = planta.dados_json or {}
            
            # Se foi gerada pelo agente
            if 'layout_agente' in dados:
                areas_atendidas = dados.get('areas_atendidas', [])
                
                # Converter lista de strings em objetos mais estruturados
                ambientes = []
                for i, area_desc in enumerate(areas_atendidas):
                    # Tentar extrair informa√ß√µes da string descritiva
                    nome = area_desc
                    area = 0
                    tipo = 'indefinido'
                    
                    # Parsing b√°sico para extrair metragem
                    import re
                    match = re.search(r'(\d+(?:\.\d+)?)\s*m¬≤', area_desc)
                    if match:
                        area = float(match.group(1))
                    
                    # Detectar tipo baseado no nome
                    area_lower = area_desc.lower()
                    if 'exposi√ß√£o' in area_lower or 'exposicao' in area_lower:
                        tipo = 'exposicao'
                    elif 'reuni√£o' in area_lower or 'reuniao' in area_lower:
                        tipo = 'reuniao'
                    elif 'copa' in area_lower:
                        tipo = 'copa'
                    elif 'dep√≥sito' in area_lower or 'deposito' in area_lower:
                        tipo = 'deposito'
                    
                    ambientes.append({
                        'nome': nome,
                        'tipo': tipo,
                        'area': area,
                        'descricao': area_desc
                    })
                
                return ambientes
            
            # Se foi gerada pelo algoritmo antigo
            elif 'layout' in dados:
                layout_data = dados.get('layout', {})
                ambientes_posicionados = layout_data.get('ambientes_posicionados', [])
                
                return [{
                    'nome': amb.get('nome', 'Ambiente'),
                    'tipo': amb.get('tipo', 'indefinido'),
                    'area': amb.get('area', 0),
                    'descricao': f"{amb.get('nome', 'Ambiente')}: {amb.get('area', 0):.1f}m¬≤"
                } for amb in ambientes_posicionados]
            
            return []
        except Exception as e:
            logger.error(f"Erro ao extrair ambientes: {str(e)}")
            return []

    def get_resumo_decisoes(self, planta: PlantaBaixa) -> str:
        """Retorna resumo das decis√µes do agente ou algoritmo"""
        try:
            dados = planta.dados_json or {}
            
            # Se foi gerada pelo agente
            if 'resumo_decisoes' in dados:
                return dados.get('resumo_decisoes', '')
            
            # Se foi gerada pelo algoritmo, gerar resumo simples
            elif 'layout' in dados:
                layout_data = dados.get('layout', {})
                num_ambientes = len(layout_data.get('ambientes_posicionados', []))
                area_usada = layout_data.get('area_total_usada', 0)
                taxa_ocupacao = layout_data.get('taxa_ocupacao', 0)
                
                return f"Layout algor√≠tmico com {num_ambientes} ambientes, {area_usada:.1f}m¬≤ utilizados ({taxa_ocupacao:.1f}% de ocupa√ß√£o)."
            
            return 'Planta baixa gerada - informa√ß√µes de decis√£o n√£o dispon√≠veis'
        except:
            return 'Informa√ß√µes n√£o dispon√≠veis'

    def get_tipo_estande(self, planta: PlantaBaixa) -> str:
        """Retorna tipo de estande"""
        try:
            dados = planta.dados_json or {}
            return (dados.get('tipo_estande', '') or
                   dados.get('layout_agente', {}).get('dados_basicos', {}).get('tipo_estande', '') or
                   'n√£o especificado')
        except:
            return 'n√£o especificado'

    def get_metodo_geracao(self, planta: PlantaBaixa) -> str:
        """Retorna m√©todo usado para gerar a planta"""
        try:
            if 'agente' in (planta.algoritmo_usado or ''):
                return 'agente'
            elif planta.dados_json and 'layout_agente' in planta.dados_json:
                return 'agente'
            else:
                return 'algoritmo'
        except:
            return 'desconhecido'

    def eh_planta_agente(self, planta: PlantaBaixa) -> bool:
        """Verifica se a planta foi gerada pelo agente"""
        return self.get_metodo_geracao(planta) == 'agente'

    def get_lados_abertos(self, planta: PlantaBaixa) -> List[str]:
        """Retorna lista de lados abertos do estande"""
        try:
            dados = planta.dados_json or {}
            return (dados.get('lados_abertos', []) or
                   dados.get('layout_agente', {}).get('dados_basicos', {}).get('lados_abertos', []))
        except:
            return []

    def get_nucleo_central(self, planta: PlantaBaixa) -> Dict:
        """Retorna informa√ß√µes do n√∫cleo central"""
        try:
            dados = planta.dados_json or {}
            return (dados.get('nucleo_central', {}) or
                   dados.get('layout_agente', {}).get('dados_basicos', {}).get('nucleo_central', {}))
        except:
            return {}

    # ==========================================
    # M√âTODOS PARA REGENERA√á√ÉO E REFINAMENTO
    # ==========================================

    def regenerar_planta_baixa(self, planta_atual: PlantaBaixa, 
                              instrucoes_modificacao: str = '') -> Dict:
        """Regenera uma planta baixa existente com modifica√ß√µes opcionais"""
        try:
            briefing = planta_atual.briefing
            nova_versao = planta_atual.versao + 1
            
            # Construir prompt com modifica√ß√µes se fornecidas
            prompt_base = self._construir_prompt_briefing(briefing)
            
            if instrucoes_modificacao.strip():
                prompt_modificado = f"""{prompt_base}

=== MODIFICA√á√ïES SOLICITADAS ===
Baseado na planta anterior (v{planta_atual.versao}), fa√ßa as seguintes modifica√ß√µes:
{instrucoes_modificacao}

Mantenha os aspectos que funcionaram bem na vers√£o anterior, mas implemente as modifica√ß√µes solicitadas.
"""
            else:
                prompt_modificado = prompt_base
            
            # Gerar nova vers√£o
            return self.gerar_planta_baixa(briefing, nova_versao, planta_atual)
            
        except Exception as e:
            logger.error(f"Erro ao regenerar planta baixa: {str(e)}")
            return {
                'success': False,
                'error': f'Erro ao regenerar planta: {str(e)}',
                'critica': f'‚ùå ERRO NA REGENERA√á√ÉO: {str(e)}',
                'pode_prosseguir': False
            }

    def refinar_planta_com_feedback(self, planta_atual: PlantaBaixa, 
                                   feedback_usuario: str) -> Dict:
        """Refina uma planta baixa baseado no feedback do usu√°rio"""
        try:
            # Extrair informa√ß√µes da planta atual
            dados_atual = planta_atual.dados_json or {}
            resumo_atual = dados_atual.get('resumo_decisoes', '')
            areas_atuais = dados_atual.get('areas_atendidas', [])
            
            # Construir prompt de refinamento
            prompt_refinamento = f"""
=== REFINAMENTO DE PLANTA BAIXA ===

PLANTA ATUAL (v{planta_atual.versao}):
Decis√µes tomadas: {resumo_atual}
√Åreas inclu√≠das: {', '.join(areas_atuais)}

FEEDBACK DO USU√ÅRIO:
{feedback_usuario}

=== BRIEFING ORIGINAL ===
{self._construir_prompt_briefing(planta_atual.briefing)}

=== SOLICITA√á√ÉO DE REFINAMENTO ===
Com base no feedback fornecido, ajuste a planta baixa mantendo os aspectos positivos e corrigindo os pontos mencionados.
Explique claramente as mudan√ßas feitas em rela√ß√£o √† vers√£o anterior.
"""
            
            # Chamar agente para refinamento
            resultado_agente = self._chamar_agente_arquiteto(prompt_refinamento)
            
            if not resultado_agente['success']:
                return {
                    'success': False,
                    'error': f"Erro no refinamento: {resultado_agente['error']}",
                    'critica': f"‚ùå ERRO DO AGENTE NO REFINAMENTO: {resultado_agente['error']}"
                }
            
            # Processar resposta e criar nova vers√£o
            layout_data = resultado_agente['layout_data']
            svg_content = layout_data.get('svg_completo', '')
            
            if not svg_content:
                return {
                    'success': False,
                    'error': 'Agente n√£o gerou SVG v√°lido no refinamento',
                    'critica': '‚ùå SVG INV√ÅLIDO NO REFINAMENTO'
                }
            
            # Criar nova vers√£o refinada
            nova_versao = planta_atual.versao + 1
            planta_refinada = self._criar_objeto_planta_agente(
                planta_atual.briefing, nova_versao, layout_data, svg_content, planta_atual
            )
            
            # Marcar planta anterior como substitu√≠da
            planta_atual.status = 'substituida'
            planta_atual.save(update_fields=['status'])
            
            return {
                'success': True,
                'planta': planta_refinada,
                'layout': layout_data,
                'message': f'Planta baixa refinada com sucesso (v{nova_versao})!',
                'mudancas': layout_data.get('resumo_decisoes', ''),
                'feedback_aplicado': feedback_usuario
            }
            
        except Exception as e:
            logger.error(f"Erro ao refinar planta: {str(e)}")
            return {
                'success': False,
                'error': f'Erro t√©cnico no refinamento: {str(e)}',
                'critica': f'‚ùå ERRO T√âCNICO NO REFINAMENTO: {str(e)}'
            }

    # ==========================================
    # M√âTODOS PARA AN√ÅLISE E VALIDA√á√ÉO
    # ==========================================

    def analisar_planta_baixa(self, planta: PlantaBaixa) -> Dict:
        """Analisa uma planta baixa e retorna m√©tricas e informa√ß√µes"""
        try:
            dados = planta.dados_json or {}
            
            analise = {
                'versao': planta.versao,
                'metodo_geracao': self.get_metodo_geracao(planta),
                'area_total_usada': self.get_area_total(planta),
                'num_ambientes': len(self.get_ambientes(planta)),
                'tipo_estande': self.get_tipo_estande(planta),
                'lados_abertos': self.get_lados_abertos(planta),
                'resumo_decisoes': self.get_resumo_decisoes(planta),
                'data_criacao': planta.criado_em,
                'data_atualizacao': planta.atualizado_em,
                'status': planta.status
            }
            
            # Adicionar informa√ß√µes espec√≠ficas do agente se dispon√≠vel
            if self.eh_planta_agente(planta):
                nucleo = self.get_nucleo_central(planta)
                analise.update({
                    'agente_usado': dados.get('metadata', {}).get('agente_usado', ''),
                    'nucleo_central': nucleo,
                    'areas_atendidas': dados.get('areas_atendidas', [])
                })
            
            # Calcular m√©tricas de efici√™ncia
            if planta.briefing and planta.briefing.area_estande:
                area_briefing = float(planta.briefing.area_estande)
                area_usada = analise['area_total_usada']
                analise['eficiencia_espacial'] = (area_usada / area_briefing) * 100 if area_briefing > 0 else 0
            
            return {
                'success': True,
                'analise': analise
            }
            
        except Exception as e:
            logger.error(f"Erro na an√°lise da planta: {str(e)}")
            return {
                'success': False,
                'error': f'Erro na an√°lise: {str(e)}'
            }

    def comparar_plantas(self, planta1: PlantaBaixa, planta2: PlantaBaixa) -> Dict:
        """Compara duas plantas baixas e retorna as diferen√ßas"""
        try:
            analise1 = self.analisar_planta_baixa(planta1)['analise']
            analise2 = self.analisar_planta_baixa(planta2)['analise']
            
            comparacao = {
                'planta_1': {
                    'versao': analise1['versao'],
                    'metodo': analise1['metodo_geracao'],
                    'area_usada': analise1['area_total_usada'],
                    'num_ambientes': analise1['num_ambientes']
                },
                'planta_2': {
                    'versao': analise2['versao'],
                    'metodo': analise2['metodo_geracao'],
                    'area_usada': analise2['area_total_usada'],
                    'num_ambientes': analise2['num_ambientes']
                },
                'diferencas': {
                    'area_usada': analise2['area_total_usada'] - analise1['area_total_usada'],
                    'num_ambientes': analise2['num_ambientes'] - analise1['num_ambientes'],
                    'mudou_metodo': analise1['metodo_geracao'] != analise2['metodo_geracao']
                }
            }
            
            # Adicionar recomenda√ß√£o
            if comparacao['diferencas']['area_usada'] > 0:
                comparacao['recomendacao'] = f"Vers√£o {analise2['versao']} utiliza {comparacao['diferencas']['area_usada']:.1f}m¬≤ a mais"
            elif comparacao['diferencas']['area_usada'] < 0:
                comparacao['recomendacao'] = f"Vers√£o {analise2['versao']} utiliza {abs(comparacao['diferencas']['area_usada']):.1f}m¬≤ a menos"
            else:
                comparacao['recomendacao'] = "Ambas as vers√µes utilizam a mesma √°rea"
            
            return {
                'success': True,
                'comparacao': comparacao
            }
            
        except Exception as e:
            logger.error(f"Erro na compara√ß√£o: {str(e)}")
            return {
                'success': False,
                'error': f'Erro na compara√ß√£o: {str(e)}'
            }

    # ==========================================
    # M√âTODOS DE EXPORTA√á√ÉO E UTILIDADES
    # ==========================================

    def exportar_dados_planta(self, planta: PlantaBaixa, formato: str = 'json') -> Dict:
        """Exporta dados da planta em diferentes formatos"""
        try:
            if formato.lower() == 'json':
                dados_exportacao = {
                    'projeto': {
                        'numero': planta.projeto.numero,
                        'nome': planta.projeto.nome,
                        'empresa': planta.projeto.empresa.nome
                    },
                    'planta': {
                        'versao': planta.versao,
                        'metodo_geracao': self.get_metodo_geracao(planta),
                        'algoritmo_usado': planta.algoritmo_usado,
                        'status': planta.status,
                        'criado_em': planta.criado_em.isoformat(),
                        'atualizado_em': planta.atualizado_em.isoformat()
                    },
                    'layout': {
                        'area_total_usada': self.get_area_total(planta),
                        'tipo_estande': self.get_tipo_estande(planta),
                        'lados_abertos': self.get_lados_abertos(planta),
                        'nucleo_central': self.get_nucleo_central(planta),
                        'ambientes': self.get_ambientes(planta)
                    },
                    'decisoes': {
                        'resumo': self.get_resumo_decisoes(planta),
                        'areas_atendidas': planta.dados_json.get('areas_atendidas', []) if planta.dados_json else []
                    }
                }
                
                return {
                    'success': True,
                    'dados': dados_exportacao,
                    'formato': 'json'
                }
            
            else:
                return {
                    'success': False,
                    'error': f'Formato {formato} n√£o suportado'
                }
                
        except Exception as e:
            logger.error(f"Erro na exporta√ß√£o: {str(e)}")
            return {
                'success': False,
                'error': f'Erro na exporta√ß√£o: {str(e)}'
            }

    def get_historico_versoes(self, projeto) -> List[Dict]:
        """Retorna hist√≥rico de todas as vers√µes de plantas baixas de um projeto"""
        try:
            plantas = PlantaBaixa.objects.filter(projeto=projeto).order_by('-versao')
            
            historico = []
            for planta in plantas:
                analise = self.analisar_planta_baixa(planta)
                if analise['success']:
                    historico.append(analise['analise'])
            
            return historico
            
        except Exception as e:
            logger.error(f"Erro ao obter hist√≥rico: {str(e)}")
            return []

    def validar_configuracao_agente(self) -> Dict:
        """Valida se o agente est√° configurado corretamente"""
        try:
            # Verificar se agente existe e est√° ativo
            if not self.agente:
                return {
                    'valido': False,
                    'erro': 'Agente n√£o encontrado'
                }
            
            if not self.agente.ativo:
                return {
                    'valido': False,
                    'erro': 'Agente n√£o est√° ativo'
                }
            
            # Verificar campos obrigat√≥rios
            campos_obrigatorios = ['llm_model', 'llm_system_prompt', 'task_instructions']
            for campo in campos_obrigatorios:
                if not getattr(self.agente, campo, None):
                    return {
                        'valido': False,
                        'erro': f'Campo {campo} n√£o configurado no agente'
                    }
            
            # Verificar se tem API key
            if not settings.OPENAI_API_KEY:
                return {
                    'valido': False,
                    'erro': 'OPENAI_API_KEY n√£o configurada'
                }
            
            return {
                'valido': True,
                'agente': {
                    'nome': self.agente.nome,
                    'modelo': self.agente.llm_model,
                    'temperatura': self.agente.llm_temperature,
                    'ativo': self.agente.ativo
                }
            }
            
        except Exception as e:
            return {
                'valido': False,
                'erro': f'Erro na valida√ß√£o: {str(e)}'
            }